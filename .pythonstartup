import os
import re
import sys


def autoimport(*modules):
    autoimported = set()
    for module in modules:
        if module.endswith(".*"):
            base = module[:-2]
            try:
                exec(
                    f"from {base} import *",
                    globals(),
                    globals(),
                )
            except ImportError:
                print(f"Failed to import {module}")
            else:
                autoimported.add(module)
        elif "." in module:
            base, name = module.rsplit(".", 1)
            try:
                exec(
                    f"from {base} import {name}",
                    globals(),
                    globals(),
                )
            except ImportError:
                print(f"Failed to import {module}")
            else:
                autoimported.add(module)
        else:
            try:
                exec(
                    f"import {module}",
                    globals(),
                    globals(),
                )
            except ImportError:
                print(f"Failed to import {module}")
            else:
                autoimported.add(module)


    print('Auto-imported for your convenience:')
    print(', '.join(sorted(autoimported)))

if not os.environ.get("PYTHON_NOIMPORT"):
    autoimport(
        "sys",
        "os",
        "re",
        "functools",
        "asyncio",
        "typing.*",
        "pathlib.Path",
        "dataclasses.dataclass",
        "numpy as np",
        "pandas as pd"
    )

    try:
        from rich import pretty
        pretty.install()
        del pretty
    except ImportError:
        print("Failed to import rich and to install pretty-print")



try:
    from _pyrepl.simple_interact import _get_reader
    from _pyrepl.commands import Command
except ImportError:
    pass
else:
    # Hack the new Python 3.13 REPL!
    cmds = {
        r"\C-n": "[2, 1, 3, 4, 7, 11, 18, 29]",
        r"\C-f": '["apples", "oranges", "bananas", "strawberries", "pears"]',
    }
    from textwrap import dedent
    reader = _get_reader()
    for n, (key, text) in enumerate(cmds.items(), start=1):
        name = f"CustomCommand{n}"
        exec(dedent(f"""
            class _cmds:
                class {name}(Command):
                    def do(self):
                        self.reader.insert({text!r})
                reader.commands[{name!r}] = {name}
                reader.bind({key!r}, {name!r})
        """))
    # Clean up all the new variables
    del _get_reader, Command, dedent, reader, cmds, text, key, name, _cmds, n


